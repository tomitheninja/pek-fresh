/* tslint:disable */
/* eslint-disable */
/**
 * PEK:fresh API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Counter,
} from '../models';
import {
    CounterFromJSON,
    CounterToJSON,
} from '../models';

/**
 * 
 */
export class CountersApi extends runtime.BaseAPI {

    /**
     * get the current value of the counter
     * 
     */
    async countersControllerGetCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/counters/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * get the current value of the counter
     * 
     */
    async countersControllerGetCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countersControllerGetCountRaw(initOverrides);
        return await response.value();
    }

    /**
     * increment the counter and return the new value
     * 
     */
    async countersControllerIncrementRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/counters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * increment the counter and return the new value
     * 
     */
    async countersControllerIncrement(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countersControllerIncrementRaw(initOverrides);
        return await response.value();
    }

    /**
     * a list each increments
     * 
     */
    async countersControllerListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Counter>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/counters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CounterFromJSON));
    }

    /**
     * a list each increments
     * 
     */
    async countersControllerList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Counter>> {
        const response = await this.countersControllerListRaw(initOverrides);
        return await response.value();
    }

}
